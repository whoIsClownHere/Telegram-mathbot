import statistics as st
import numpy as np
import matplotlib.pyplot as plt
import sympy as sym
from matplotlib import cm
import pandas as pd

print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—à–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. üìì \n'
      )
print('–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: \n'
      '\t—É—Ä–∞–≤–Ω–µ–Ω–∏—è - ur \n'
      '\t—É–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π - uv \n'
      '\t–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è - pr \n'
      '\t—Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - dk \n'
      '\t—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫–æ–±–æ–∫ - rs \n'
      '\t–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π - kl \n'
      '\t—É–ø—Ä–æ—â–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π - ut \n'
      '\t—Ñ—É–Ω–∫—Ü–∏–∏ - fu \n'
      '\t–≥–µ–æ–º–µ—Ç—Ä–∏—è - gm \n'
      '\t—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ - st \n'
      '\t–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ - prg \n')


def equations():
    a = input('–í–≤–µ–¥–∏ 1-–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ')
    b = input('–í–≤–µ–¥–∏ 2-–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ \n'
              '(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –Ω–∞–∂–∞—Ç—å Enter.): ')
    c = input('–í–≤–µ–¥–∏ 3-–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ \n'
              '(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –Ω–∞–∂–∞—Ç—å Enter.): ')
    print('–í–≤–µ–¥–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ—à–∞–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ. –ï—Å–ª–∏ –µ—ë –Ω–µ—Ç - –Ω–∞–∂–∞—Ç—å Enter.')
    p1 = input('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Ññ1 = ')
    p2 = input('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Ññ2 = ')
    p3 = input('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Ññ3 = ')
    if p3 != '' and p2 != '':
        d1 = sym.symbols(p1)
        d2 = sym.symbols(p2)
        d3 = sym.symbols(p3)
    elif p3 == '' and p2 != '':
        d1 = sym.symbols(p1)
        d2 = sym.symbols(p2)
    elif p3 == '' and p2 == '':
        d1 = sym.symbols(p1)
    if c == '' and b == '':
        ur = sym.solveset(a, d1)
        print(d1, '=', *ur)
    elif a != '' and c == '':
        ur = sym.solve((a, b), (d1, d2))
        print(d1, '=', ur[d1], d2, '=', ur[d2])
    elif a != '' and b != '' and c != '':
        ur = sym.solve((a, b, c), (d1, d2, d3))
        print(d1, '=', ur[d1], d2, '=', ur[d2], d3, '=', ur[d3])


def factorization():
    a = input('–í–≤–µ–¥–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ')
    print(sym.factor(a))


def derivative():
    x = sym.symbols(input())
    y = eval(input('–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é: '))
    a = y.diff(x)
    print('f‚Äô=', a)


def combining_logarithmic_expressions():
    a = input('–í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: \n')
    print(sym.logcombine(a))


def simplification_of_trigonometric_expressions():
    a = input('–í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ')
    print(sym.trigsimp(a))


def expression_simplification():
    a = input('–í–≤–µ–¥–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–∏—è: \n')
    print(sym.simplify(a))

try:
    type = input('–í–≤–µ–¥–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏: \n')
    if type == 'ur':
        equations()
    elif type == 'dk':
        factorization()
    elif type.lower() == 'pr':
        derivative()
    elif type == 'kl':
        combining_logarithmic_expressions()
    elif type == 'ut':
        simplification_of_trigonometric_expressions()
    elif type == 'uv':
        expression_simplification()
    elif type == 'rs':
        a = input('–í–≤–µ–¥–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–¥–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫–∏: \n')
        print(sym.expand(a))
    elif type == 'st':
        ts = input('–í–≤–µ–¥–∏ —Ä–∞–∑–¥–µ–ª \n'
                   '  - c—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - st \n'
                   '  - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ - vs \n'
                   '  - –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ - kb \n'
                   '  - –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ - dg \n'
                   '  - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ 2-—Ö –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - of \n')
        if ts == 'st':
            sp = input('–í–≤–µ–¥–∏ –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ë—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: \n').split(' ')
            sp = list(map(lambda x: float(eval(x)), sp))
            sp = sorted(sp)
            print('–°—Ä. –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ =', st.fmean(sp))
            print('–°—Ä. –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ =', st.geometric_mean(sp))
            print('–°—Ä. –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ =', st.harmonic_mean(sp))
            print('–ú–µ–¥–∏–∞–Ω–∞ =', st.median(sp))
            print('–ù–∏–∑—à–∞—è –º–µ–¥–∏–∞–Ω–∞ =', st.median_low(sp))
            print('–í—ã—Å—à–∞—è –º–µ–¥–∏–∞–Ω–∞ =', st.median_high(sp))
            print('–ì—Ä—É–ø–ø. –º–µ–¥–∏–∞–Ω–∞ =', st.median_grouped(sp))
            print('–ú–æ–¥–∞ =', st.mode(sp))
            print('–ú—É–ª—å—Ç–∏–º–æ–¥–∞ =', st.multimode(sp))
            print('–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ä–∞–≤–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ =', st.quantiles(sp))
            print('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ =', st.pstdev(sp))
            print('–ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è =', st.pvariance(sp))
            print('–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ =', st.stdev(sp))
            print('–í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è =', st.variance(sp))
        elif ts == 'vs':
            n = int(input('–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ N: '))
            na = int(input('–ò—Å–∫–æ–º–æ–µ –∫–æ–ª-–≤–æ N(A): '))
            nb = int(input('–ò—Å–∫–æ–º–æ–µ –∫–æ–ª-–≤–æ N(B) *–¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω—è —Å–æ–±—ã—Ç–∏–π: '))
            print('P(A) =', sym.Rational(na, n))
            print('P(B) =', sym.Rational(nb, n))
            print('P(A‚à©B) =', sym.Rational(na, n) * sym.Rational(nb, n))
            print('P(A‚ãÉB) =', sym.Rational(na, n) + sym.Rational(nb, n) - (sym.Rational(na, n)) * sym.Rational(nb, n))
        elif ts == 'of':
            sp = input('–í–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ë—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: \n').split(
                ' ')
            sp = list(map(lambda x: float(eval(x)), sp))
            sp = sorted(sp)
            sp2 = input('–í–≤–µ–¥–∏ –≤—Ç–æ—Ä–æ–π –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ë—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: \n').split(
                ' ')
            print('K–æ–≤–∞—Ä–∏–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö =', st.covariance(sp, sp2))
            print('K–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞ =', st.correlation(sp, sp2))
            print('–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è =', st.linear_regression(sp, sp2))
            sp2 = list(map(lambda x: float(eval(x)), sp2))
            sp2 = sorted(sp2)
        elif ts == 'dg':
            tg = input('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞/–¥–∏–∞–≥—Ä–∞–º–º—ã:\n'
                       '  - —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ - sd\n'
                       '  - –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ - kd\n'
                       '  - o–±–ª–∞–∫–æ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è - or\n')
            if tg == 'sd':
                ts = input('–í–≤–µ–¥–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:\n'
                           'CSV-—Ñ–∞–π–ª - csv\n'
                           '–í—Ä—É—á–Ω—É—é - mt\n')
                if ts.lower() == 'mt':
                    n = int(input('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n'))
                    an = []
                    for i in range(1, n + 1):
                        an.append(i)
                    sp = []
                    print('–í–≤–æ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∂–∏–º–∞—Ç—å Enter:')
                    for i in range(n):
                        a = input()
                        sp.append(a)
                    sp = list(map(lambda x: int(eval(x)), sp))
                    fig = plt.figure()
                    plt.bar(an, sp, color='r')
                    plt.grid(True)
                    plt.show()
                elif ts.lower() == 'csv':
                    road = input('–í–≤–µ–¥–∏ –ø—É—Ç—å —Ñ–∞–π–ª–∞. –î–æ–ª–∂–Ω–æ –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .csv:\n')
                    data = pd.read_csv(road)
                    df = pd.DataFrame(data)
                    X = list(df.iloc[:, 0])
                    Y = list(df.iloc[:, 1])
                    plt.grid(True)
                    plt.show()
                elif tg == 'or':
                    name = input('–í–≤–µ–¥–∏ –ø—É—Ç–ª —Ñ–∞–π–ª–∞ .csv:\n')
            elif tg == 'kd':
                sp = input('–í–≤–µ–¥–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n')
                x = [10, 26]
                fig = plt.figure()
                plt.pie(x, labels=sp)
                plt.show()
    elif type == 'fu':
        tf = input('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:\n'
                   '  - 2D\n'
                   '  - 3D\n'
                   '  - –ü–∞—Ä–∞–º–µ—Ç—Ä–∞–ª—å–Ω–∞—è 2D - p2\n'
                   '  - –ü–∞—Ä–∞–º–µ—Ç—Ä–∞–ª—å–Ω–∞—è 3D - p3\n')
        if tf == '3D' or tf == '3d':
            a = input('–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é —Å ¬´F(z)¬ª: \n')
            x = sym.symbols('x')
            y = sym.symbols('y')
            f = lambda x, y: eval(a)
            fig = plt.figure(figsize=(50, 50))
            ax = fig.add_subplot(1, 1, 1, projection='3d')
            x1, x2 = float(input('–í–≤–µ–¥–∏ –ø—Ä–µ–¥–µ–ª x1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):\n')), float(
                input('–í–≤–µ–¥–∏ –ø—Ä–µ–¥–µ–ª x2:\n'))
            y1, y2 = float(input('–í–≤–µ–¥–∏ –ø—Ä–µ–¥–µ–ª y1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):\n')), float(
                input('–í–≤–µ–¥–∏ –ø—Ä–µ–¥–µ–ª y2:\n'))
            xval = np.linspace(x1, x2, 100)
            yval = np.linspace(y1, y2, 100)
            x, y = np.meshgrid(xval, yval)
            z = f(x, y)
            surf = ax.plot_surface(
                x, y, z,
                rstride=1,
                cstride=1,
                cmap=cm.viridis)
            plt.grid(True)
            plt.show()
        elif tf == '2D' or tf == '2d':
            a = input('–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é F(x) = ')
            x = sym.symbols('x')
            y = lambda x: eval(a)
            fig = plt.subplots()
            x = np.linspace(-10, 10, 100)
            plt.plot(x, y(x), color='r')
            plt.grid(True)
            plt.show()
    elif type == 'prg':
        tp = input('–í–≤–µ–¥–∏ —Ç–∏–ø: \n'
                   '  - –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è - ap, \n'
                   '  - –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è - gp \n')
        if tp == 'ap':
            print('–í–≤–µ–¥–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: \n')
            anach = eval(input('a‚ÇÅ = '))
            alast = eval(input('a‚Çô = '))
            d = eval(input('d = '))
            sp = []
            for i in range(anach, alast + 1, d):
                sp.append(i)
            print('–°—É–º–º–∞ –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ =', ((2 * anach + d * (len(sp) - 1)) / 2) * len(sp))
            x = input('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏:\n')
            if x in sp:
                print('–ü—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç')
            else:
                print('–ù–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç')
        # elif tp == 'gp':
    elif type == 'gm':
        print('–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–ª–∏—á–∏–Ω:\n'
              '\t–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ:\n'
              '\t\t–∫–≤–∞–¥—Ä–∞—Ç -  cu\n'
              '\t\t—Ä–æ–º–± - rb\n'
              '\t\t–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å - cr\n'
              '\t\t–∫—Ä—É–≥ - kr\n'
              '\t\t–ø–∞—Ä–∞–ª–ª–µ–ª–æ–≥—Ä–∞–º–º - pg\n'
              '\t\t–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ - pu\n'
              '\t\t—Ç—Ä–∞–ø–µ—Ü–∏—è - tp\n'
              '\t\t—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ - tg\n'
              '\t\t–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π n-—É–≥–æ–ª—å–Ω–∏–∫ - nu\n'
              '–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ:\n'
              '\t–ü—Ä–∏–∑–º—ã:\n'
              '\t\t–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è n-—É–≥–æ–ª—å–Ω–∞—è - rnp\n'
              '\t\t–ü—Ä—è–º–∞—è n-—É–≥–æ–ª—å–Ω–∞—è - pnp \n'
              '\t\t–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è n-—É–≥–æ–ª—å–Ω–∞—è - inp\n'
              '\t–ü–∏—Ä–∞–º–∏–¥—ã:\n'
              '\t\t–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è - rsp\n'
              '\t\t–ü—Ä—è–º–∞—è - psp\n'
              '\t\t–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è - isp\n'
              '\t–¢–µ–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è:\n'
              '\t\t–¶–∏–ª–∏–Ω–¥—Ä - sci\n'
              '\t\t–®–∞—Ä - sph\n'
              '\t\t–ö–æ–Ω—É—Å - scs\n'
              '')
        a = input('–í–≤–µ–¥–∏ —Ñ–∏–≥—É—Ä—É:\n')

except Exception as e:
    print(e)
